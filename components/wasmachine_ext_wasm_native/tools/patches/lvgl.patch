diff --git a/Kconfig b/Kconfig
index ccbbc7b47..c480a08ef 100644
--- a/Kconfig
+++ b/Kconfig
@@ -1078,6 +1078,25 @@ menu "LVGL configuration"
             help
                 Set the maximum number of candidate panels that can be displayed.
                 This needs to be adjusted according to the size of the screen.
+        config LV_EXTERNAL_DATA_AND_DESTRUCTOR
+            bool "External data and destructor"
+            default n
+            help
+                Enable this option to activate external data and destructor functionality,
+                which assists in resource cleanup when objects are freed by either LVGL core
+                or applications. Currently supported features include:
+                    - event
+                    - object
+                    - disp
+                    - anim
+                    - timer
+        config LV_EXT_DATA_MAX_NUM
+            int "Maximum number of external data"
+            depends on LV_EXTERNAL_DATA_AND_DESTRUCTOR
+            default 3
+            help
+                The default number of external data arrays is 3, if the number of external data arrays set
+                by lv_obj_set_external_data is greater than 3, you need to reconfigure LV_EXT_DATA_MAX_NUM
     endmenu
 
     menu "Examples"
diff --git a/lv_conf_template.h b/lv_conf_template.h
index 1ed255dae..ba288c450 100644
--- a/lv_conf_template.h
+++ b/lv_conf_template.h
@@ -737,6 +737,15 @@
     #endif // LV_IME_PINYIN_USE_K9_MODE
 #endif
 
+/** Enable or disable for external data and destructor function */
+#define LV_EXTERNAL_DATA_AND_DESTRUCTOR   0
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    #define LV_EXT_DATA_MAX_NUM 3
+    #if (LV_EXT_DATA_MAX_NUM < 1)
+        #error "LV_EXT_DATA_MAX_NUM must be larger than 0"
+    #endif
+#endif
+
 /*==================
 * EXAMPLES
 *==================*/
diff --git a/src/core/lv_event.c b/src/core/lv_event.c
index 1ca967210..9ce7306e1 100644
--- a/src/core/lv_event.c
+++ b/src/core/lv_event.c
@@ -21,6 +21,11 @@ typedef struct _lv_event_dsc_t {
     lv_event_cb_t cb;
     void * user_data;
     lv_event_code_t filter : 8;
+
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    void (* destructor)(void * ext_data);
+    void * ext_data;
+#endif
 } lv_event_dsc_t;
 
 /**********************
@@ -169,9 +174,40 @@ struct _lv_event_dsc_t * lv_obj_add_event_cb(lv_obj_t * obj, lv_event_cb_t event
     obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].filter = filter;
     obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
 
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    struct _lv_event_dsc_t * dsc = &obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1];
+    dsc->destructor = NULL;
+    dsc->ext_data = NULL;
+#endif
+
     return &obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1];
 }
 
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+void lv_event_desc_set_external_data(struct _lv_event_dsc_t * dsc, void * ext_data,
+                                     void (* destructor)(void * ext_data))
+{
+    LV_ASSERT_NULL(dsc);
+
+    /* Clean up existing external data if present */
+    if(dsc->destructor && dsc->ext_data) {
+        dsc->destructor(dsc->ext_data);
+    }
+
+    dsc->ext_data = ext_data;
+    dsc->destructor = destructor;
+}
+
+void run_event_desc_array_destructor(void * event_dsc_array, int count)
+{
+    struct _lv_event_dsc_t * dsc = (struct _lv_event_dsc_t *)event_dsc_array;
+
+    for(int i = 0; i < count; i++) {
+        if(dsc[i].ext_data && dsc[i].destructor) dsc[i].destructor(dsc[i].ext_data);
+    }
+}
+#endif
+
 bool lv_obj_remove_event_cb(lv_obj_t * obj, lv_event_cb_t event_cb)
 {
     LV_ASSERT_OBJ(obj, MY_CLASS);
@@ -180,6 +216,9 @@ bool lv_obj_remove_event_cb(lv_obj_t * obj, lv_event_cb_t event_cb)
     int32_t i = 0;
     for(i = 0; i < obj->spec_attr->event_dsc_cnt; i++) {
         if(event_cb == NULL || obj->spec_attr->event_dsc[i].cb == event_cb) {
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+            run_event_desc_array_destructor(&obj->spec_attr->event_dsc[i], 1);
+#endif
             /*Shift the remaining event handlers forward*/
             for(; i < (obj->spec_attr->event_dsc_cnt - 1); i++) {
                 obj->spec_attr->event_dsc[i] = obj->spec_attr->event_dsc[i + 1];
@@ -205,6 +244,9 @@ bool lv_obj_remove_event_cb_with_user_data(lv_obj_t * obj, lv_event_cb_t event_c
     for(i = 0; i < obj->spec_attr->event_dsc_cnt; i++) {
         if((event_cb == NULL || obj->spec_attr->event_dsc[i].cb == event_cb) &&
            obj->spec_attr->event_dsc[i].user_data == user_data) {
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+            run_event_desc_array_destructor(&obj->spec_attr->event_dsc[i], 1);
+#endif
             /*Shift the remaining event handlers forward*/
             for(; i < (obj->spec_attr->event_dsc_cnt - 1); i++) {
                 obj->spec_attr->event_dsc[i] = obj->spec_attr->event_dsc[i + 1];
@@ -229,6 +271,9 @@ bool lv_obj_remove_event_dsc(lv_obj_t * obj, struct _lv_event_dsc_t * event_dsc)
     int32_t i = 0;
     for(i = 0; i < obj->spec_attr->event_dsc_cnt; i++) {
         if(&obj->spec_attr->event_dsc[i] == event_dsc) {
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+            run_event_desc_array_destructor(&obj->spec_attr->event_dsc[i], 1);
+#endif
             /*Shift the remaining event handlers forward*/
             for(; i < (obj->spec_attr->event_dsc_cnt - 1); i++) {
                 obj->spec_attr->event_dsc[i] = obj->spec_attr->event_dsc[i + 1];
@@ -438,6 +483,9 @@ static lv_res_t event_send_core(lv_event_t * e)
            && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
                (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
             e->user_data = event_dsc->user_data;
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+            e->ext_data = event_dsc->ext_data;
+#endif
             event_dsc->cb(e);
 
             if(e->stop_processing) return LV_RES_OK;
@@ -458,6 +506,9 @@ static lv_res_t event_send_core(lv_event_t * e)
         if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
            && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
             e->user_data = event_dsc->user_data;
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+            e->ext_data = event_dsc->ext_data;
+#endif
             event_dsc->cb(e);
 
             if(e->stop_processing) return LV_RES_OK;
diff --git a/src/core/lv_event.h b/src/core/lv_event.h
index d89d438db..a73f462a4 100644
--- a/src/core/lv_event.h
+++ b/src/core/lv_event.h
@@ -100,6 +100,11 @@ typedef struct _lv_event_t {
     uint8_t deleted : 1;
     uint8_t stop_processing : 1;
     uint8_t stop_bubbling : 1;
+
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    void (* destructor)(void * data);
+    void * ext_data;
+#endif
 } lv_event_t;
 
 /**
@@ -235,6 +240,31 @@ void _lv_event_mark_deleted(struct _lv_obj_t * obj);
 struct _lv_event_dsc_t * lv_obj_add_event_cb(struct _lv_obj_t * obj, lv_event_cb_t event_cb, lv_event_code_t filter,
                                              void * user_data);
 
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+/**
+ * Set external data and its destructor for an event descriptor.
+ * This allows associating custom data with an event callback that will be automatically cleaned up
+ * when the event descriptor is removed or destroyed.
+ * @param dsc         pointer to an event descriptor (from lv_obj_add_event_cb)
+ * @param data        pointer to the external data to associate with the event descriptor
+ * @param destructor  function pointer to a destructor that will be called to clean up the external data.
+ *                    The destructor will receive the data pointer as its parameter.
+ */
+void lv_event_desc_set_external_data(struct _lv_event_dsc_t * dsc, void * data, void (* destructor)(void * data));
+
+/**
+ * Execute destructors for an array of event descriptors.
+ * This function iterates through an array of event descriptors and safely calls
+ * each descriptor's destructor (if defined) on its external data.
+ *
+ * @param event_dsc_array Pointer to the first element of an array of event descriptors.
+ *                        The array elements must be of type `struct _lv_event_dsc_t`.
+ * @param count           Number of elements in the event descriptor array.
+ */
+
+void run_event_desc_array_destructor(void * event_dsc_array, int count);
+#endif
+
 /**
  * Remove an event handler function for an object.
  * @param obj       pointer to an object
diff --git a/src/core/lv_obj.c b/src/core/lv_obj.c
index 23eef36c9..48d662b2e 100644
--- a/src/core/lv_obj.c
+++ b/src/core/lv_obj.c
@@ -447,6 +447,7 @@ static void lv_obj_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
     LV_TRACE_OBJ_CREATE("finished");
 }
 
+struct _lv_event_dsc_t;
 static void lv_obj_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
 {
     LV_UNUSED(class_p);
@@ -471,6 +472,9 @@ static void lv_obj_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
             obj->spec_attr->children = NULL;
         }
         if(obj->spec_attr->event_dsc) {
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+            run_event_desc_array_destructor(obj->spec_attr->event_dsc, obj->spec_attr->event_dsc_cnt);
+#endif
             lv_mem_free(obj->spec_attr->event_dsc);
             obj->spec_attr->event_dsc = NULL;
         }
diff --git a/src/core/lv_obj.h b/src/core/lv_obj.h
index 1f4ed716e..0bf63079c 100644
--- a/src/core/lv_obj.h
+++ b/src/core/lv_obj.h
@@ -189,6 +189,11 @@ typedef struct _lv_obj_t {
     uint16_t h_layout   : 1;
     uint16_t w_layout   : 1;
     uint16_t being_deleted   : 1;
+
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    void (* destructor)(void * ext_data);
+    void * ext_data[LV_EXT_DATA_MAX_NUM];
+#endif
 } lv_obj_t;
 
 /**********************
@@ -378,6 +383,28 @@ static inline lv_coord_t lv_obj_dpx(const lv_obj_t * obj, lv_coord_t n)
     return _LV_DPX_CALC(lv_disp_get_dpi(lv_obj_get_disp(obj)), n);
 }
 
+/**
+ * @brief Associates an array of external data pointers with an LVGL object
+ *
+ * Attaches multiple user-defined data pointers to an LVGL object along with an optional
+ * destructor callback that will be called when the object is deleted. The function:
+ * - Safely handles NULL checks for object and input array
+ * - Respects LV_EXT_DATA_MAX_NUM limit
+ * - Avoids duplicate entries
+ * - Preserves existing non-NULL data slots
+ *
+ * @param obj Target LVGL object (if NULL, function returns early)
+ * @param ext_data Array of data pointers to associate (elements can be NULL)
+ * @param ext_data_num Number of elements in ext_data array
+ * @param destructor Cleanup function called for each non-NULL data pointer during
+ *                   object deletion. Receives single data pointer as parameter.
+ *                   NULL means no automatic cleanup.
+ */
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+void lv_obj_set_external_data(lv_obj_t * obj, void * ext_data[], int ext_data_num,
+                              void (* destructor)(void * ext_data));
+#endif
+
 /**********************
  *      MACROS
  **********************/
diff --git a/src/core/lv_obj_class.c b/src/core/lv_obj_class.c
index fe2044824..ef40adbbb 100644
--- a/src/core/lv_obj_class.c
+++ b/src/core/lv_obj_class.c
@@ -133,6 +133,14 @@ void lv_obj_class_init_obj(lv_obj_t * obj)
 
 void _lv_obj_destruct(lv_obj_t * obj)
 {
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    for(int i = 0; i < LV_EXT_DATA_MAX_NUM; i++) {
+        if(obj->destructor && obj->ext_data[i]) {
+            obj->destructor(obj->ext_data[i]);
+            obj->ext_data[i] = NULL;
+        }
+    }
+#endif
     if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 
     if(obj->class_p->base_class) {
@@ -168,6 +176,38 @@ bool lv_obj_is_group_def(lv_obj_t * obj)
     return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 }
 
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+void lv_obj_set_external_data(lv_obj_t * obj, void * ext_data[], int ext_data_num,
+                              void (* destructor)(void * ext_data))
+{
+    LV_ASSERT_NULL(obj);
+    int num = ext_data_num < LV_EXT_DATA_MAX_NUM ? ext_data_num : LV_EXT_DATA_MAX_NUM;
+
+    for(int i = 0; i < num; i++) {
+        bool exists = false;
+        for(int c = 0; c < LV_EXT_DATA_MAX_NUM; c++) {
+            if(ext_data[i] != NULL && obj->ext_data[c] == ext_data[i]) {
+                exists = true;
+                break;
+            }
+        }
+
+        if(!exists && ext_data[i] != NULL) {
+            for(int c = 0; c < LV_EXT_DATA_MAX_NUM; c++) {
+                if(obj->ext_data[c] == NULL) {
+                    obj->ext_data[c] = ext_data[i];
+                    break;
+                }
+            }
+        }
+    }
+
+    if(destructor) {
+        obj->destructor = destructor;
+    }
+}
+#endif
+
 /**********************
  *   STATIC FUNCTIONS
  **********************/
@@ -176,6 +216,13 @@ static void lv_obj_construct(lv_obj_t * obj)
 {
     const lv_obj_class_t * original_class_p = obj->class_p;
 
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    obj->destructor = NULL;
+    for(int i = 0; i < LV_EXT_DATA_MAX_NUM; i++) {
+        obj->ext_data[i] = NULL;
+    }
+#endif
+
     if(obj->class_p->base_class) {
         /*Don't let the descendant methods run during constructing the ancestor type*/
         obj->class_p = obj->class_p->base_class;
diff --git a/src/hal/lv_hal_disp.c b/src/hal/lv_hal_disp.c
index 6f1c9626d..c1b55d4f9 100644
--- a/src/hal/lv_hal_disp.c
+++ b/src/hal/lv_hal_disp.c
@@ -317,6 +317,10 @@ void lv_disp_remove(lv_disp_t * disp)
         lv_obj_del(disp->screens[0]);
     }
 
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    if(disp->driver->destructor && disp->driver->ext_data) disp->driver->destructor(disp->driver->ext_data);
+#endif
+
     _lv_ll_remove(&LV_GC_ROOT(_lv_disp_ll), disp);
     _lv_ll_clear(&disp->sync_areas);
     if(disp->refr_timer) lv_timer_del(disp->refr_timer);
@@ -605,6 +609,14 @@ void lv_disp_drv_use_generic_set_px_cb(lv_disp_drv_t * disp_drv, lv_img_cf_t cf)
     }
 }
 
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+void lv_disp_drv_set_external_data(lv_disp_drv_t * disp_drv, void * ext_data, void (* destructor)(void * ext_data))
+{
+    disp_drv->ext_data = ext_data;
+    disp_drv->destructor = destructor;
+}
+#endif
+
 /**********************
  *   STATIC FUNCTIONS
  **********************/
diff --git a/src/hal/lv_hal_disp.h b/src/hal/lv_hal_disp.h
index d942860e4..69745f8f0 100644
--- a/src/hal/lv_hal_disp.h
+++ b/src/hal/lv_hal_disp.h
@@ -149,6 +149,10 @@ typedef struct _lv_disp_drv_t {
     void * user_data; /**< Custom display driver user data*/
 #endif
 
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    void (* destructor)(void * ext_data);
+    void * ext_data;
+#endif
 } lv_disp_drv_t;
 
 /**
@@ -360,6 +364,23 @@ lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp);
 
 void lv_disp_drv_use_generic_set_px_cb(lv_disp_drv_t * disp_drv, lv_img_cf_t cf);
 
+
+/**
+ * @brief Set external user data and its destructor for a display driver
+ *
+ * Associates user-defined data with a display driver and specifies a destructor function
+ * that will be called when the driver is cleaned up. This allows for proper resource
+ * management of driver-specific data.
+ *
+ * @param disp_drv Pointer to the display driver structure to modify
+ * @param ext_data User-defined data pointer to associate with the driver. Can be NULL.
+ * @param destructor Function to call when cleaning up the external data. Receives the
+ *                   ext_data pointer as parameter. Can be NULL if no cleanup needed.
+ */
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+void lv_disp_drv_set_external_data(lv_disp_drv_t * disp_drv, void * ext_data, void (* destructor)(void * ext_data));
+#endif
+
 /**********************
  *      MACROS
  **********************/
diff --git a/src/lv_conf_internal.h b/src/lv_conf_internal.h
index 0c297081c..45802ac59 100644
--- a/src/lv_conf_internal.h
+++ b/src/lv_conf_internal.h
@@ -2379,6 +2379,27 @@
     #endif // LV_IME_PINYIN_USE_K9_MODE
 #endif
 
+/** Enable or disable for external data and destructor function */
+#ifndef LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    #ifdef CONFIG_LV_EXTERNAL_DATA_AND_DESTRUCTOR
+        #define LV_EXTERNAL_DATA_AND_DESTRUCTOR CONFIG_LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    #else
+        #define LV_EXTERNAL_DATA_AND_DESTRUCTOR   0
+    #endif
+#endif
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    #ifndef LV_EXT_DATA_MAX_NUM
+        #ifdef CONFIG_LV_EXT_DATA_MAX_NUM
+            #define LV_EXT_DATA_MAX_NUM CONFIG_LV_EXT_DATA_MAX_NUM
+        #else
+            #define LV_EXT_DATA_MAX_NUM 3
+        #endif
+    #endif
+    #if (LV_EXT_DATA_MAX_NUM < 1)
+        #error "LV_EXT_DATA_MAX_NUM must be larger than 0"
+    #endif
+#endif
+
 /*==================
 * EXAMPLES
 *==================*/
diff --git a/src/misc/lv_anim.c b/src/misc/lv_anim.c
index 9291cf498..9379b5c5f 100644
--- a/src/misc/lv_anim.c
+++ b/src/misc/lv_anim.c
@@ -39,6 +39,7 @@ static uint32_t last_timer_run;
 static bool anim_list_changed;
 static bool anim_run_round;
 static lv_timer_t * _lv_anim_tmr;
+static lv_anim_t * _lv_running_anim;
 
 /**********************
  *      MACROS
@@ -70,6 +71,10 @@ void lv_anim_init(lv_anim_t * a)
     a->repeat_cnt = 1;
     a->path_cb = lv_anim_path_linear;
     a->early_apply = 1;
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    a->destructor = NULL;
+    a->ext_data = NULL;
+#endif
 }
 
 lv_anim_t * lv_anim_start(const lv_anim_t * a)
@@ -96,13 +101,18 @@ lv_anim_t * lv_anim_start(const lv_anim_t * a)
 
     /*Set the start value*/
     if(new_anim->early_apply) {
+        _lv_running_anim = new_anim;
         if(new_anim->get_value_cb) {
             int32_t v_ofs = new_anim->get_value_cb(new_anim);
             new_anim->start_value += v_ofs;
             new_anim->end_value += v_ofs;
         }
 
-        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
+        if(new_anim->exec_cb && new_anim->var) {
+            new_anim->exec_cb(new_anim->var, new_anim->start_value);
+        }
+
+        _lv_running_anim = NULL;
     }
 
     /*Creating an animation changed the linked list.
@@ -147,6 +157,9 @@ bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
         if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
             _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
             if(a->deleted_cb != NULL) a->deleted_cb(a);
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+            if(a->destructor && a->ext_data) a->destructor(a->ext_data);
+#endif
             lv_mem_free(a);
             anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
                                        the linked list*/
@@ -358,6 +371,8 @@ static void anim_timer(lv_timer_t * param)
     lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 
     while(a != NULL) {
+        _lv_running_anim = a;
+
         /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
          * happened in `anim_ready_handler` which could make this linked list reading corrupt
          * because the list is changed meanwhile
@@ -406,6 +421,8 @@ static void anim_timer(lv_timer_t * param)
             a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
     }
 
+    _lv_running_anim = NULL;
+
     last_timer_run = lv_tick_get();
 }
 
@@ -435,6 +452,9 @@ static void anim_ready_handler(lv_anim_t * a)
         /*Call the callback function at the end*/
         if(a->ready_cb != NULL) a->ready_cb(a);
         if(a->deleted_cb != NULL) a->deleted_cb(a);
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+        if(a->destructor && a->ext_data) a->destructor(a->ext_data);
+#endif
         lv_mem_free(a);
     }
     /*If the animation is not deleted then restart it*/
@@ -467,3 +487,23 @@ static void anim_mark_list_change(void)
     else
         lv_timer_resume(_lv_anim_tmr);
 }
+
+lv_anim_t * lv_anim_get_running_anim(void)
+{
+    return _lv_running_anim;
+}
+
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+void lv_anim_set_external_data(lv_anim_t * anim, void * ext_data, void (* destructor)(void * ext_data))
+{
+    LV_ASSERT_NULL(anim);
+
+    /* Clean up existing external data if present */
+    if(anim->destructor && anim->ext_data) {
+        anim->destructor(anim->ext_data);
+    }
+
+    anim->ext_data = ext_data;
+    anim->destructor = destructor;
+}
+#endif
diff --git a/src/misc/lv_anim.h b/src/misc/lv_anim.h
index faef72787..676460d98 100644
--- a/src/misc/lv_anim.h
+++ b/src/misc/lv_anim.h
@@ -96,6 +96,11 @@ typedef struct _lv_anim_t {
     uint8_t playback_now : 1; /**< Play back is in progress*/
     uint8_t run_round : 1;    /**< Indicates the animation has run in this round*/
     uint8_t start_cb_called : 1;    /**< Indicates that the `start_cb` was already called*/
+
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    void (* destructor)(void * ext_data);
+    void * ext_data;
+#endif
 } lv_anim_t;
 
 /**********************
@@ -469,6 +474,27 @@ int32_t lv_anim_path_bounce(const lv_anim_t * a);
  */
 int32_t lv_anim_path_step(const lv_anim_t * a);
 
+/**
+ * @brief Associates external user data with an animation instance
+ *
+ * Attaches arbitrary user-defined data to an LVGL animation object along with an optional
+ * destructor callback that will be automatically invoked when the animation completes
+ * or is deleted, enabling proper resource cleanup.
+ *
+ * @param anim Pointer to the animation object to configure (must not be NULL)
+ * @param ext_data User-defined data pointer to associate (may be NULL)
+ * @param destructor Cleanup callback that receives ext_data when:
+ *                   - Animation completes naturally
+ *                   - Animation is deleted prematurely
+ *                   - New data replaces current association
+ *                   NULL indicates no cleanup required
+ */
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+void lv_anim_set_external_data(lv_anim_t * anim, void * ext_data, void (*destructor)(void * ext_data));
+#endif
+
+lv_anim_t * lv_anim_get_running_anim(void);
+
 /**********************
  *   GLOBAL VARIABLES
  **********************/
diff --git a/src/misc/lv_timer.c b/src/misc/lv_timer.c
index a21038a36..5413bc50c 100644
--- a/src/misc/lv_timer.c
+++ b/src/misc/lv_timer.c
@@ -179,6 +179,11 @@ lv_timer_t * lv_timer_create(lv_timer_cb_t timer_xcb, uint32_t period, void * us
     new_timer->last_run = lv_tick_get();
     new_timer->user_data = user_data;
 
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    new_timer->destructor = NULL;
+    new_timer->ext_data = NULL;
+#endif
+
     timer_created = true;
 
     return new_timer;
@@ -203,6 +208,10 @@ void lv_timer_del(lv_timer_t * timer)
     _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
     timer_deleted = true;
 
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    if(timer->destructor && timer->ext_data) timer->destructor(timer->ext_data);
+#endif
+
     lv_mem_free(timer);
 }
 
@@ -288,6 +297,21 @@ lv_timer_t * lv_timer_get_next(lv_timer_t * timer)
     else return _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), timer);
 }
 
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+void lv_timer_set_external_data(lv_timer_t * timer, void * ext_data, void (* destructor)(void * ext_data))
+{
+    LV_ASSERT_NULL(timer);
+
+    /* Clean up existing external data if present */
+    if(timer->destructor && timer->ext_data) {
+        timer->destructor(timer->ext_data);
+    }
+
+    timer->ext_data = ext_data;
+    timer->destructor = destructor;
+}
+#endif
+
 /**********************
  *   STATIC FUNCTIONS
  **********************/
diff --git a/src/misc/lv_timer.h b/src/misc/lv_timer.h
index 50da8c9da..0e43646fa 100644
--- a/src/misc/lv_timer.h
+++ b/src/misc/lv_timer.h
@@ -48,6 +48,11 @@ typedef struct _lv_timer_t {
     void * user_data; /**< Custom user data*/
     int32_t repeat_count; /**< 1: One time;  -1 : infinity;  n>0: residual times*/
     uint32_t paused : 1;
+
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+    void (* destructor)(void * ext_data);
+    void * ext_data;
+#endif
 } lv_timer_t;
 
 /**********************
@@ -172,6 +177,22 @@ uint8_t lv_timer_get_idle(void);
  */
 lv_timer_t * lv_timer_get_next(lv_timer_t * timer);
 
+/**
+ * @brief Attaches external user data and destructor callback to a timer object
+ *
+ * Associates custom user data with an LVGL timer and specifies a destructor function
+ * that will be automatically invoked when the timer is deleted to properly clean up
+ * the associated resources.
+ *
+ * @param timer      Pointer to the timer object (must not be NULL)
+ * @param ext_data   User-defined data pointer to associate with the timer (may be NULL)
+ * @param destructor Callback function for cleaning up ext_data when timer is deleted.
+ *                   Receives ext_data as parameter. NULL means no cleanup required.
+ */
+#if LV_EXTERNAL_DATA_AND_DESTRUCTOR
+void lv_timer_set_external_data(lv_timer_t * timer, void * ext_data, void (* destructor)(void * ext_data));
+#endif
+
 /**********************
  *      MACROS
  **********************/
-- 
2.25.1

